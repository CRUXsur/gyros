#!/usr/bin/env python3
"""
Script de interfaz principal entre NestJS y Robot Framework.
Este m√≥dulo act√∫a como puente de comunicaci√≥n para automatizaci√≥n.

Autor: Sistema Gyros
Fecha: Septiembre 2025
"""

import sys
import os
import json
from datetime import datetime
from typing import Dict, Any, Optional

# Agregar el directorio de bibliotecas al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'Library', 'PyLibs'))

try:
    from Utility import get_connected_device_id, validate_device_connection, get_device_info
except ImportError as e:
    print(f"Error importando m√≥dulos: {e}")
    sys.exit(1)


class AutomationInterface:
    """
    Clase principal para manejar la automatizaci√≥n entre NestJS y Robot Framework.
    """
    
    def __init__(self):
        self.device_id = None
        self.last_detection_time = None
        
    def check_device_and_execute(self, action_type: str = "check_device") -> Dict[str, Any]:
        """
        Funci√≥n principal que ejecuta desde NestJS.
        
        Args:
            action_type (str): Tipo de acci√≥n a ejecutar
            
        Returns:
            dict: Resultado de la operaci√≥n
        """
        try:
            print(f"\nüîß AUTOMATION INTERFACE - Iniciando acci√≥n: {action_type}")
            print("=" * 60)
            
            # 1. Detectar dispositivo
            device_id = get_connected_device_id()
            self.device_id = device_id
            self.last_detection_time = datetime.now()
            
            print(f"üì± Device ID detectado: {device_id}")
            
            # 2. Validar conexi√≥n
            validate_device_connection(device_id)
            print(f"‚úÖ Dispositivo validado correctamente")
            
            # 3. Ejecutar acci√≥n seg√∫n el tipo
            if action_type == "check_device":
                result = self._check_device_only(device_id)
                
            elif action_type == "make_action":
                result = self._make_action(device_id)
                
            elif action_type == "get_device_info":
                result = self._get_detailed_info(device_id)
                
            elif action_type == "toggle_prestamo_status":
                # Esta acci√≥n se manejar√° desde NestJS directamente
                result = {
                    "device_id": device_id,
                    "action": "toggle_prestamo_status",
                    "message": "Esta acci√≥n se maneja desde NestJS",
                    "status": "delegated_to_nestjs"
                }
                
            else:
                raise ValueError(f"Acci√≥n no v√°lida: {action_type}")
            
            print(f"üéØ Acci√≥n '{action_type}' completada exitosamente")
            return result
            
        except Exception as e:
            error_result = {
                "success": False,
                "error": str(e),
                "action": action_type,
                "timestamp": datetime.now().isoformat(),
                "device_id": getattr(self, 'device_id', None)
            }
            print(f"‚ùå Error en automation interface: {e}")
            return error_result
    
    def _check_device_only(self, device_id: str) -> Dict[str, Any]:
        """
        Solo verificar dispositivo sin acciones adicionales.
        
        Args:
            device_id (str): ID del dispositivo
            
        Returns:
            dict: Informaci√≥n b√°sica del dispositivo
        """
        return {
            "success": True,
            "device_id": device_id,
            "action": "check_device",
            "status": "detected",
            "timestamp": datetime.now().isoformat(),
            "message": "Dispositivo detectado y validado exitosamente"
        }
    
    def _make_action(self, device_id: str) -> Dict[str, Any]:
        """
        Ejecutar acci√≥n principal que modifica el estado del pr√©stamo.
        Esta funci√≥n ser√° llamada cuando se detecte un cliente con pr√©stamos activos.
        
        Args:
            device_id (str): ID del dispositivo
            
        Returns:
            dict: Resultado de la acci√≥n
        """
        print(f"üîÑ Ejecutando make_action para device: {device_id}")
        
        # Obtener informaci√≥n del dispositivo
        device_info = get_device_info(device_id)
        
        # Simular acci√≥n de robot (por ejemplo, abrir una app espec√≠fica)
        robot_action_result = self._simulate_robot_action(device_id)
        
        return {
            "success": True,
            "device_id": device_id,
            "action": "make_action",
            "device_info": device_info,
            "robot_action": robot_action_result,
            "timestamp": datetime.now().isoformat(),
            "message": "Acci√≥n de automatizaci√≥n ejecutada exitosamente",
            "next_steps": "NestJS debe actualizar isActive en tabla prestamos"
        }
    
    def _get_detailed_info(self, device_id: str) -> Dict[str, Any]:
        """
        Obtener informaci√≥n detallada del dispositivo.
        
        Args:
            device_id (str): ID del dispositivo
            
        Returns:
            dict: Informaci√≥n detallada
        """
        device_info = get_device_info(device_id)
        
        return {
            "success": True,
            "device_id": device_id,
            "action": "get_device_info",
            "device_info": device_info,
            "detection_time": self.last_detection_time.isoformat() if self.last_detection_time else None,
            "timestamp": datetime.now().isoformat()
        }
    
    def _simulate_robot_action(self, device_id: str) -> Dict[str, Any]:
        """
        Simular una acci√≥n de Robot Framework.
        En una implementaci√≥n real, aqu√≠ se ejecutar√≠an comandos espec√≠ficos del robot.
        
        Args:
            device_id (str): ID del dispositivo
            
        Returns:
            dict: Resultado de la acci√≥n del robot
        """
        print(f"ü§ñ Ejecutando acci√≥n de Robot Framework para device: {device_id}")
        
        # Aqu√≠ podr√≠amos ejecutar comandos espec√≠ficos como:
        # - Abrir una aplicaci√≥n espec√≠fica
        # - Tomar una screenshot
        # - Interactuar con la UI
        # - Verificar estado de la aplicaci√≥n
        
        return {
            "action_type": "robot_simulation",
            "steps_executed": [
                "Conectar con dispositivo",
                "Validar estado de la aplicaci√≥n",
                "Ejecutar comandos espec√≠ficos",
                "Verificar resultado"
            ],
            "duration_seconds": 2.5,
            "success": True,
            "message": "Acci√≥n de robot ejecutada exitosamente"
        }


def main():
    """
    Funci√≥n principal para uso desde l√≠nea de comandos.
    """
    if len(sys.argv) < 2:
        print("Uso: python automation_interface.py <action_type>")
        print("Acciones disponibles: check_device, make_action, get_device_info")
        sys.exit(1)
    
    action_type = sys.argv[1]
    
    interface = AutomationInterface()
    result = interface.check_device_and_execute(action_type)
    
    # Imprimir resultado en formato JSON para NestJS
    print("\n" + "="*60)
    print("üìä RESULTADO FINAL:")
    print(json.dumps(result, indent=2, ensure_ascii=False))
    print("="*60)
    
    # Exit code basado en el √©xito
    sys.exit(0 if result.get('success', False) else 1)


if __name__ == "__main__":
    main()
